"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/create-token/page",{

/***/ "(app-pages-browser)/./services/token-service.ts":
/*!***********************************!*\
  !*** ./services/token-service.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenService: function() { return /* binding */ TokenService; }\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/state/mint.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/constants.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/instructions/initializeMint.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/instructions/mintTo.js\");\n// services/token-service.ts (avec correction d'import)\n\n\n/**\n * Service pour créer un nouveau token Solana (avec imports corrigés)\n */ class TokenService {\n    /**\n   * Crée un nouveau token sur la blockchain Solana\n   * @param details Les détails du token à créer\n   * @param wallet L'objet wallet qui contient le signataire\n   */ async createToken(details, wallet) {\n        try {\n            console.log(\"Creating token with wallet:\", wallet.publicKey.toString());\n            // Générer un keypair pour le mint\n            const mintKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n            console.log(\"Generated mint keypair:\", mintKeypair.publicKey.toString());\n            // Calculer le loyer nécessaire pour le compte de mint\n            // Au lieu d'utiliser getMinimumBalanceForRentExemption de @solana/spl-token,\n            // nous utilisons directement getMinimumBalanceForRentExemption de la connexion\n            const rentExemptMint = await this.connection.getMinimumBalanceForRentExemption(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MINT_SIZE);\n            // Obtenir l'adresse du compte associé pour le wallet\n            const associatedTokenAddress = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.getAssociatedTokenAddress)(mintKeypair.publicKey, wallet.publicKey);\n            // Construire la transaction\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n            // Instruction 1: Créer le compte pour le mint\n            transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.createAccount({\n                fromPubkey: wallet.publicKey,\n                newAccountPubkey: mintKeypair.publicKey,\n                space: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MINT_SIZE,\n                lamports: rentExemptMint,\n                programId: _solana_spl_token__WEBPACK_IMPORTED_MODULE_2__.TOKEN_PROGRAM_ID\n            }));\n            // Instruction 2: Initialiser le mint\n            transaction.add((0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_3__.createInitializeMintInstruction)(mintKeypair.publicKey, details.decimals, wallet.publicKey, wallet.publicKey, _solana_spl_token__WEBPACK_IMPORTED_MODULE_2__.TOKEN_PROGRAM_ID));\n            // Instruction 3: Créer le compte associé pour le propriétaire\n            transaction.add((0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_4__.createAssociatedTokenAccountInstruction)(wallet.publicKey, associatedTokenAddress, wallet.publicKey, mintKeypair.publicKey // Mint\n            ));\n            // Instruction 4: Minter l'offre initiale\n            const mintAmount = details.totalSupply * Math.pow(10, details.decimals);\n            transaction.add((0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.createMintToInstruction)(mintKeypair.publicKey, associatedTokenAddress, wallet.publicKey, BigInt(mintAmount) // Montant (ajusté pour les décimales et converti en BigInt)\n            ));\n            // Signer avec le wallet\n            transaction.recentBlockhash = (await this.connection.getLatestBlockhash()).blockhash;\n            transaction.feePayer = wallet.publicKey;\n            const signedTx = await wallet.signTransaction(transaction);\n            // Ajouter la signature du mintKeypair\n            signedTx.partialSign(mintKeypair);\n            // Envoyer la transaction signée\n            const rawTransaction = signedTx.serialize();\n            const txid = await this.connection.sendRawTransaction(rawTransaction, {\n                skipPreflight: false,\n                preflightCommitment: \"confirmed\"\n            });\n            // Attendre la confirmation\n            await this.connection.confirmTransaction(txid, \"confirmed\");\n            console.log(\"Transaction confirmed:\", txid);\n            // Construire le lien explorer\n            const explorerLink = this.getExplorerLink(txid);\n            // Retourner les informations sur le token créé\n            return {\n                tokenAddress: mintKeypair.publicKey.toString(),\n                txSignature: txid,\n                explorerLink\n            };\n        } catch (error) {\n            console.error(\"Erreur lors de la cr\\xe9ation du token:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Mint (ajouter) des tokens à une adresse spécifiée\n   */ async mintTokens(tokenAddress, recipientAddress, amount, wallet) {\n        try {\n            const mintPubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(tokenAddress);\n            const recipientPubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(recipientAddress);\n            // Obtenir l'adresse du compte associé pour le destinataire\n            const recipientTokenAccount = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.getAssociatedTokenAddress)(mintPubkey, recipientPubkey);\n            // Construire la transaction\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n            // Vérifier si le compte associé existe déjà\n            const accountInfo = await this.connection.getAccountInfo(recipientTokenAccount);\n            if (!accountInfo) {\n                // Le compte n'existe pas, nous devons le créer d'abord\n                transaction.add((0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_4__.createAssociatedTokenAccountInstruction)(wallet.publicKey, recipientTokenAccount, recipientPubkey, mintPubkey));\n            }\n            // Ajouter l'instruction pour minter des tokens\n            transaction.add((0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.createMintToInstruction)(mintPubkey, recipientTokenAccount, wallet.publicKey, BigInt(amount) // Montant (converti en BigInt)\n            ));\n            // Ajouter le blockhash et le payeur\n            transaction.recentBlockhash = (await this.connection.getLatestBlockhash()).blockhash;\n            transaction.feePayer = wallet.publicKey;\n            // Signer avec le wallet\n            const signedTx = await wallet.signTransaction(transaction);\n            // Envoyer la transaction signée\n            const rawTransaction = signedTx.serialize();\n            const txid = await this.connection.sendRawTransaction(rawTransaction, {\n                skipPreflight: false,\n                preflightCommitment: \"confirmed\"\n            });\n            // Attendre la confirmation\n            await this.connection.confirmTransaction(txid, \"confirmed\");\n            return txid;\n        } catch (error) {\n            console.error(\"Erreur lors du minting de tokens:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Construit un lien vers l'explorateur Solana\n   */ getExplorerLink(signature) {\n        const baseUrl = this.network === \"mainnet\" ? \"https://explorer.solana.com\" : \"https://explorer.solana.com\";\n        return \"\".concat(baseUrl, \"/tx/\").concat(signature, \"?cluster=\").concat(this.network);\n    }\n    constructor(network = \"devnet\"){\n        this.network = network;\n        // Initialiser la connexion au réseau approprié\n        const endpoint = network === \"mainnet\" ? \"https://api.mainnet-beta.solana.com\" : \"https://api.devnet.solana.com\";\n        this.connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(endpoint, \"confirmed\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/token-service.ts\n"));

/***/ })

});